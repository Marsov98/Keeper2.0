@page "/Group/{id:int}"
@using Data.Models

<html>
<head>
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
</style>
<body>
    <a class="btn btn-primary" href="/Home">Главная</a>
    @if (Statements == null)
    {
        <p><em>Загрузка...</em></p>
    }
    else
    {
        if (Statements.Count > 0)
        {
            <div class="modal" style="@(isOpenPhoto ? "display:block" : "display:none")">
                <div class="modal-content">
                    <span class="close" @onclick="CloseModalPhoto">&times;</span>
                    @if (Statements[i].Photo != null)
                    {
                        var imageBase64 = Convert.ToBase64String(Statements[i].Photo);
                        var imageSrc = $"data:image/jpeg;base64,{imageBase64}";
                        <img src="@imageSrc" alt="Фото пациента" />
                    }
                    else
                    {
                        <h3>Отсутствует фото посетителя</h3>
                    }
                </div>
            </div>
            <div class="modal" style="@(isOpenPDF ? "display:block" : "display:none")">
                <div class="modal-content">
                    <span class="close" @onclick="CloseModalPDF">&times;</span>
                    @if (Statements[i].Pdf != null)
                    {

                        var imageBase64 = Convert.ToBase64String(Statements[i].Pdf);
                        var imageSrc = $"data:application/pdf;base64,{imageBase64}";
                        <object data="@imageSrc" type="application/pdf" width="800" height="600">
                            Ваш браузер не поддерживает встроенные PDF.
                        </object>
                    }
                    else
                    {
                        <h3>Отсутствует скан паспорта посетителя</h3>
                    }
                </div>
            </div>
        }
        <center>
            <table class="table">
                <thead>
                    <tr>
                        <td><h3>ID</h3></td>
                        <td><h3>Фото</h3></td>
                        <td><h3>ID группы</h3></td>
                        <td><h3>ФИО</h3></td>
                        <td><h3>Сотрудник</h3></td>
                        <td><h3>Подразделение</h3></td>
                        <td align="center"><h3>Дата и время</h3></td>
                        <td><h3>Телефон</h3></td>
                        <td><h3>Email</h3></td>
                        <td><h3>Организация</h3></td>
                        <td><h3>Дата рождения</h3></td>
                        <td><h3>Паспорт</h3></td>
                        <td><h3>Примечание</h3></td>
                        <td><h3>ЧС</h3></td>
                    </tr>
                </thead>
                <tbody>
                    @{
                        for (int i = 0; i < Statements.Count(); i++)
                        {
                            var currentIndex = i;
                            <tr>
                                <td>
                                    <h3>@Statements[i].Id</h3>
                                </td>
                                <td>
                                    <button class="btn btn-primary" @onclick="@(() => OpenModalPhoto(currentIndex))">Фото</button>
                                </td>
                                <td>
                                    <h3>@Statements[i].ApplicationNumber</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].FirstName @Statements[i].Name @Statements[i].LastName</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Employees.Name</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Employees.Division.Info</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].BeginDate - @Statements[i].EndDate</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Number</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Email</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Organization</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Birthday</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Passport  <button class="btn btn-primary" @onclick="@(() => OpenModalPDF(currentIndex))">Скан</button></h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Note</h3>
                                </td>
                                <td>
                                    <input type="submit" class="btn btn-primary" @onclick="() => BlackList(Statements[i].Passport)" value="Ложные данные" />
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <table class="table">
                <thead>
                    <tr>
                        <td><h3>Дата</h3></td>
                        <td><h3>Время начала</h3></td>
                        <td><h3>Время конца</h3></td>
                        <td><h3>Статус</h3></td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><input type="date" id="date" @onchange="@(date => UpdateTimeOptions(date))" /></td>
                        <td>
                            <select id="startTime" @onchange="@(date => UpdateEndTimes(date))">
                                @foreach (var time in StartTimes)
                                {
                                    <option value="@time">@time.ToString("HH:mm")</option>
                                }
                            </select>
                        </td>
                        <td>
                            <InputSelect id="endTime" @bind-Value="End">
                                @foreach (var time in EndTimes)
                                {
                                    <option value="@time">@time.ToString("HH:mm")</option>
                                }
                            </InputSelect>
                        </td>
                        <td>
                            <InputSelect @bind-Value="Status">
                                <option value="0">Одобрено</option>
                                <option value="1">Недостоверные данные</option>
                                <option value="2">Отсутствие прикрепленных файлов</option>
                            </InputSelect>
                        </td>
                    </tr>
                </tbody>
            </table>
            <button class="btn btn-primary" @onclick="Push">Отправить</button>
        </center>
    }
</body>
</html>
@code {
    [Parameter]
    public int Id { get; set; }
    public List<Statement> Statements = new List<Statement>();
    static HttpClient Http = new HttpClient();
    int Status = 0;
    DateTime SelectedDate { get; set; }// = DateTime.Now;
    List<DateTime> StartTimes { get; set; } = new List<DateTime>();
    List<DateTime> EndTimes { get; set; } = new List<DateTime>();
    private List<BusyTime> busyTimes = new List<BusyTime>();
    DateTime Begin, End;
    bool isOpenPhoto = false;
    bool isOpenPDF = false;
    int i;

    async Task OpenModalPhoto(int i)
    {
        this.i = i;
        isOpenPhoto = true;
    }
    void CloseModalPhoto() => isOpenPhoto = false;

    void OpenModalPDF(int i)
    {
        this.i = i;
        isOpenPDF = true;
    }
    void CloseModalPDF() => isOpenPDF = false;

    protected override async Task OnInitializedAsync()
    {
        using var response = await Http.GetAsync($"https://localhost:7244/api/Statement/GetGroup/{Id}");
        if (response.IsSuccessStatusCode)
        {
            Statements = await response.Content.ReadFromJsonAsync<List<Statement>>();
        }

        busyTimes = await Http.GetFromJsonAsync<List<BusyTime>>($"https://localhost:7244/api/Statement/GetBusyTime");
        GenerateTimeOptions();
    }

    private void UpdateTimeOptions(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime selectedDate))
        {
            SelectedDate = selectedDate;
            // Очистка текущих списков времени
            StartTimes.Clear();
            EndTimes.Clear();

            // Генерация новых списков времени на основе выбранной даты и занятых времен
            GenerateTimeOptions();
        }
        else
        {
            Console.WriteLine("Что-то не так!!!");
        }
    }

    private void GenerateTimeOptions()
    {
        var allTimes = new List<DateTime>();
        var currentDate = SelectedDate.Date;
        for (var hour = 8; hour <= 20; hour++)
        {
            if (hour != 20)
            {
                for (var minute = 0; minute <= 50; minute += 10)
                {
                    allTimes.Add(new DateTime(currentDate.Year, currentDate.Month, currentDate.Day, hour, minute, 0));
                }
            }
        }

        // Фильтрация доступных времен
        StartTimes = allTimes.Except(busyTimes.SelectMany(bt => GenerateTimes(bt.BusyBeginDate, bt.BusyEndDate))).ToList();
        EndTimes = allTimes.Except(busyTimes.SelectMany(bt => GenerateTimes(bt.BusyBeginDate, bt.BusyEndDate))).ToList();
    }

    private IEnumerable<DateTime> GenerateTimes(DateTime begin, DateTime end)
    {
        var times = new List<DateTime>();
        for (var time = begin; time < end; time = time.AddMinutes(10))
        {
            times.Add(time);
        }
        return times;
    }

    private void UpdateEndTimes(ChangeEventArgs e)
    {
        DateTime.TryParse(e.Value.ToString(), out DateTime selectedDate);
        Begin = selectedDate;
        // Получаем список занятых времен, которые начинаются после выбранного времени начала
        var busyTimesAfterBegin = busyTimes
            .Where(bt => bt.BusyBeginDate > Begin)
            .OrderBy(bt => bt.BusyBeginDate)
            .ToList();

        // Если занятые времена есть после выбранного времени начала,
        // то конечное время должно быть меньше времени начала следующего занятого времени
        if (busyTimesAfterBegin.Any())
        {
            var nextBusyTimeBegin = busyTimesAfterBegin.First().BusyBeginDate;
            EndTimes = EndTimes.Where(t => t < nextBusyTimeBegin && t > Begin).ToList();
        }
        else
        {
            // Если занятых времен после выбранного времени начала нет,
            // то конечное время может быть любым временем после выбранного времени начала
            EndTimes = EndTimes.Where(t => t > Begin).ToList();
        }
    }

    private void UpdateStartTimes()
    {
        // Обновление списка доступных начальных времен на основе выбранного конечного времени
        StartTimes = StartTimes.Where(t => t < End).ToList();
    }

    private async Task BlackList(string passport)
    {
        using var response = await Http.GetAsync($"https://localhost:7244/api/User/BlackList/{passport}");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Пользователь добавлен в ЧС");
        }
    }

    private async Task Push()
    {
        foreach (var statements in Statements)
        {
            switch (Status)
            {
                case 1:
                case 2:
                    statements.Status = "Заявка на посещение объекта КИИ отклонена в связи с нарушением Федерального закона от 26.07.2017 № 194-ФЗ «О внесении изменений в Уголовный кодекс Российской Федерации и статью 151 Уголовно-процессуального кодекса Российской Федерации в связи с принятием Федерального закона " + '"' + "О безопасности критической информационной инфраструктуры Российской Федерации" + '"' + " по причине указания заявителем заведомо недостоверных данных";
                    break;
                default:
                    statements.BeginDate = Begin;
                    statements.EndDate = End;
                    statements.Status = "Одобрено";
                    break;
            }
        }
        using var response = await Http.PostAsJsonAsync($"https://localhost:7244/api/Statement/UpdateGroup", Statements);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Готово");
        }
        if(Status == 0)
        {
            using var responseTime = await Http.PostAsJsonAsync($"https://localhost:7244/api/Statement/UpdateBusyTime", Statements[0]);
            if (responseTime.IsSuccessStatusCode)
            {
                Console.WriteLine("Готово");
            }
        }
    }
}

