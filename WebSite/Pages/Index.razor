@page "/"
@page "/{id:int}"
@using Data.Models
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.Net.Http.Headers
@using Service.Interfaces

@inject IHttpContextAccessor HttpContextAccessor
@inject IUserRepository userRepository
@inject NavigationManager manager
@inject IMemoryCache Cache
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<head>
    <script src="js/cookieInterop.js"></script>
</head>
<body>

    <center>
        @if (string.IsNullOrEmpty(cookieValue))
        {
            <h1>Вы еще не авторизированны...</h1>
            <a class="btn btn-lg btn-primary btn-block" href="/Auth">Авторизация</a>
        }
        else
        {
            <h1 style="color: #fff">Тип заявки</h1>
            <a class="btn btn-lg btn-primary btn-block" href="/Personal">
                <img width="300" height="300" src="img/one.png" />
                <p></p>
                <h4>Личная</h4>
            </a>
            <a class="btn btn-lg btn-primary btn-block" href="/Groups">
                <img width="300" height="300" src="img/group.png" />
                <p></p>
                <h4>Групповая</h4>
            </a>
            <p></p>
            <a class="btn btn-lg btn-primary btn-block" href="/History/@Id">История заявок</a>
            
        }
    </center>


</body>

@code {
    [Parameter]
    public int Id { get; set; }
    public Users Users = new();

    private string cookieValue;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            cookieValue = await JSRuntime.InvokeAsync<string>("cookieInterop.getCookie", "Cookie");
            StateHasChanged();
        }
    }
}