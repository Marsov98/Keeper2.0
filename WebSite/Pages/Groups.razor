@page "/Groups"
@using Data.Models
@using Aspose.Cells
@using Service.Interfaces
@using Service.Repositories
@using Syncfusion.Blazor.Buttons
@using Microsoft.AspNetCore.Components.Forms
@using Append.Blazor.Notifications
@using Microsoft.AspNetCore.Components
@using System.Text.RegularExpressions
@using BlazorInputMask

@inject INotificationService NotificationService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager manager
@inject StatementRepository StatementRepository
@inject IWebHostEnvironment _appEnvironment
@inject IJSRuntime JSRuntime


<html>
<head>
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">

    <!-- Подключение jQuery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js" async></script>
    <!-- Подключение Inputmask -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.inputmask/5.0.6/jquery.inputmask.min.js" async></script>

    
</head>

<body>
    <a class="btn btn-primary" href="/">Главная</a>
    @if (Division == null && Employees == null)
    {
        <p><em>Загрузка...</em></p>
    }
    else
    {
        <center>
            <div style="width: 1030px">
                <div class="form-signin">
                    <AntiforgeryToken />
                    <h2>Форма записи на посещение мероприятия</h2>
                    <div id="block1" class="info">
                        <center>
                            <h3>Информация для пропуска</h3>
                            <center><h4>Срок действия заявки:</h4></center>

                            <h5>
                                C*
                                <InputDate @bind-Value="@InputStatement!.BeginDate" id="startDate" min="<?= date('Y-m-d', strtotime('+1 day')) ?>" oninput="validateStartDate()" required="required" />
                                
                                по
                                <InputDate @bind-Value="@InputStatement!.EndDate" id="endDate" max="<?= date('Y-m-d', strtotime('+15 days')) ?>" oninput="validateEndDate()" required="required" />
                                
                            </h5>


                            <center><h4>Цель посещения:</h4></center>
                            <InputSelect @bind-Value="@InputStatement!.Target">
                                <option value="">Выберите цель</option>
                                <option value="Экскурсия"> Экскурсия </option>
                            </InputSelect>
                        </center>
                    </div>

                    <div id="block2" class="info">
                        <center>
                            <h3>Принимающая сторона</h3>
                            <h5>Подразделение*:</h5>
                            <InputSelect class="form-control" @bind-Value="@DivisionId">
                                @foreach (var p in Division)
                                {
                                    <option value="@p.Id">@p.Info</option>
                                }
                            </InputSelect>
                            <h5>ФИО*:</h5>
                            <InputSelect @bind-Value="@SelectedEmployeeId">
                                @foreach (var p in Employees)
                                {
                                    if (DivisionId == p.DivisionId)
                                    {
                                        <option value="@p.Id">@p.Name</option>
                                    }
                                }
                            </InputSelect>
                        </center>
                    </div>
                    <p></p>
                    <div class="info2">
                        <h3>Информация о посетителе</h3>
                        <table>
                            <tr>
                                <td>
                                    <h5>Фамилия*:</h5>
                                </td>
                                <td>
                                    <InputText id="Name" @bind-Value="InputStatement.FirstName" class="form-control" required="required" />

                                </td>
                                <td>
                                    <h5>Организация:</h5>
                                </td>
                                <td>
                                    <InputText id="Organization" @bind-Value="InputStatement!.Organization" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <h5>Имя*:</h5>
                                </td>
                                <td>
                                    <InputText id="Name" @bind-Value="InputStatement.Name" class="form-control" required="required" />
                                </td>
                                <td>
                                    <h5>Примечание*:</h5>
                                </td>
                                <td>
                                    <InputText id="Note" @bind-Value="InputStatement!.Note" required="required" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <h5>Отчество:</h5>
                                </td>
                                <td>
                                    <InputText @bind-Value="InputStatement!.LastName" />
                                </td>
                                <td>
                                    <h5>Дата рождения*:</h5>
                                </td>
                                <td>
                                    <InputDate @bind-Value="InputStatement!.Birthday" required="required" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <h5>Телефон:</h5>
                                </td>
                                <td>
                                    <InputText id="phone" @bind-Value="InputStatement.Number" required="required" />
                                </td>
                                <td>
                                    <h5>Серия*:</h5>
                                </td>
                                <td>
                                    <InputText @bind-Value="sPassport" required="required" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <h5>Email*:</h5>
                                </td>
                                <td>
                                    <InputText @bind-Value="InputStatement!.Email" required="required" />
                                </td>
                                <td>
                                    <h5>Номер*:</h5>
                                </td>
                                <td>
                                    <InputText @bind-Value="nPassport" required="required" />
                                </td>
                            </tr>
                        </table>
                    </div>
                    <input type="submit" class="m-2 p-2 btn btn-primary" @onclick="AddUser" value="Добавить посетителя" />
                </div>

                <div class="info">
                    <h6>Список посетителей</h6>

                    <div info_file>
                        <label for="visits"></label>
                        <InputFile OnChange="OnInputExelChange" accept=".xls,.pdf" />
                        <a href='table.xls'>Скачать шаблон списка</a>
                    </div>


                    <div class="table">
                        <table>
                            <thead>
                                <tr>
                                    <th>№</th>
                                    <th>ФИО</th>
                                    <th>Контакты</th>
                                    <th>Фотография</th>
                                    <th>Pdf</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    if (Statements != null)
                                    {
                                        for (int i = 0; i < Statements.Count(); i++)
                                        {
                                            var currentIndex = i;
                                            <tr>
                                                <td>@(i + 1)</td>
                                                <td>@Statements[i].Name</td>
                                                <td>@Statements[i].Number</td>
                                                <td><InputFile OnChange="@(e => OnInputPhotoChange(e, currentIndex))" /></td>
                                                <td><InputFile OnChange="@(e => OnInputFileChange(e, currentIndex))" /></td>
                                            </tr>
                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <input type="submit" @onclick="Clear" value="Очистить" />
                <input type="submit" @onclick="Submit" value="Оформить заявку" />
            </div>


        </center>
    }


    <script>
        $(document).ready(function () {
            $('#phone').inputmask({
                mask: "+7(999) 999-99-99",
                definitions: {
                    9: {
                        validator: "[0-9]",
                        casing: "lower"
                    }
                },
                placeholder: "_",
                showPlaceholder: false
            });
        });

    </script>


    <script>
        function validateStartDate() {
            var startDateInput = document.getElementById('startDate');
            var endDateInput = document.getElementById('endDate');

            var minStartDate = new Date();
            minStartDate.setDate(minStartDate.getDate() + 1); // Находим следующий день от текущей даты

            var selectedStartDate = new Date(startDateInput.value);

            if (selectedStartDate < minStartDate) {
                startDateInput.value = minStartDate.toISOString().split('T')[0];
                selectedStartDate = minStartDate;
            }

            validateEndDate(); // Вызываем проверку для даты окончания после изменения даты начала
        }

        function validateEndDate() {
            var startDateInput = document.getElementById('startDate');
            var endDateInput = document.getElementById('endDate');

            var minEndDate = new Date(startDateInput.value);
            minEndDate.setDate(minEndDate.getDate() + 1); // Дата начала плюс 1 день

            var maxEndDate = new Date(startDateInput.value);
            maxEndDate.setDate(maxEndDate.getDate() + 15); // Находим через 15 дней от даты начала

            var selectedStartDate = new Date(startDateInput.value);
            var selectedEndDate = new Date(endDateInput.value);

            if (selectedEndDate < selectedStartDate) {
                endDateInput.value = startDateInput.value;
                selectedEndDate = new Date(startDateInput.value);
            } else if (selectedEndDate > maxEndDate) {
                endDateInput.value = maxEndDate.toISOString().split('T')[0];
                selectedEndDate = maxEndDate;
            }

            // Проверяем, что разница между датами не более 15 дней
            var timeDiff = Math.abs(selectedEndDate.getTime() - selectedStartDate.getTime());
            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
            if (diffDays > 15) {
                document.getElementById('endDateError').innerText = 'Длительность заявки не может превышать 15 дней.';
                endDateInput.value = maxEndDate.toISOString().split('T')[0];
            } else {
                document.getElementById('endDateError').innerText = '';
            }
        }
    </script>



</body>
</html>

@code {
    [SupplyParameterFromForm]

    public Statement InputStatement { get; set; }
    public List<Statement> Statements { get; set; } = new();
    public string sPassport { get; set; }
    public string nPassport { get; set; }

    private DateTime minBeginDate;
    private DateTime maxBeginDate;
    private DateTime minEndDate;
    private DateTime maxEndDate;


    private int SelectedEmployeeId = 0;
    private int DivisionId = 1;

    private List<Employees>? Employees;
    private List<Division>? Division;

    static HttpClient Http = new HttpClient();

    protected override void OnInitialized()
    {

        minBeginDate = DateTime.Today.AddDays(1);
        maxBeginDate = DateTime.Today.AddDays(15);
        minEndDate = DateTime.Today.AddDays(2); ;
        maxEndDate = DateTime.Today.AddDays(16);

        InputStatement ??= new();
        Division = StatementRepository.GetDivision() ?? new List<Division>();
        Employees = StatementRepository.GetEmployees() ?? new List<Employees>();
    }


    

    private async Task OnInputPhotoChange(InputFileChangeEventArgs e, int i)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                using var memoryStream = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 2083432).CopyToAsync(memoryStream);
                Statements[i].Photo = memoryStream.ToArray();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка: {ex.Message}");
            }

        }
    }

    private void AddUser()
    {
        if (InputStatement.FirstName == null && InputStatement.Name == null && InputStatement.Email == null && InputStatement.Note == null)
        {

            NotificationOptions options = new NotificationOptions
                {
                    Body = "Заполните все поля!",
                };
        }
        else
        {
            InputStatement.Passport = sPassport + " " + nPassport;
            Statements.Add(new Statement
                {
                    FirstName = InputStatement.FirstName,
                    Name = InputStatement.Name,
                    LastName = InputStatement.LastName,
                    Organization = InputStatement.Organization,
                    Note = InputStatement.Note,
                    Number = InputStatement.Number,
                    Email = InputStatement.Email,
                    Passport = InputStatement.Passport,
                    BeginDate = InputStatement.BeginDate,
                    EndDate = InputStatement.EndDate,
                    Birthday = InputStatement.Birthday,
                    EmployeeId = SelectedEmployeeId,
                    Target = InputStatement.Target
                });
        }


    }

    private Task Clear()
    {
        InputStatement = new Statement();
        sPassport = string.Empty;
        nPassport = string.Empty;
        DivisionId = 0;
        SelectedEmployeeId = 1;
        return Task.CompletedTask;

    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e, int i)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                using var memoryStream = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 2083432).CopyToAsync(memoryStream);
                Statements[i].Pdf = memoryStream.ToArray();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка: {ex.Message}");
            }
        }
    }

    private async Task OnInputExelChange(InputFileChangeEventArgs e)
    {
        var uploadedExelGroupUsers = e.File;
        if (uploadedExelGroupUsers != null)
        {
            var path = Path.Combine(_appEnvironment.WebRootPath, "GroupUsers", uploadedExelGroupUsers.Name);
            using var stream = uploadedExelGroupUsers.OpenReadStream();
            using var fileStream = new FileStream(path, FileMode.Create);
            await stream.CopyToAsync(fileStream);

            using (Workbook wb = new Workbook(_appEnvironment.WebRootPath + $"/GroupUsers/{uploadedExelGroupUsers.Name}"))
            {

                // Получить рабочий лист, используя его индекс
                Worksheet worksheet = wb.Worksheets[0];

                int rows = worksheet.Cells.MaxDataRow + 1;

                for (int i = 1; i < rows; i++)
                {
                    Statement User = new();
                    User.BeginDate = InputStatement.BeginDate;
                    User.EndDate = InputStatement.EndDate;
                    User.Target = InputStatement.Target;
                    User.FirstName = Convert.ToString(worksheet.Cells[i, 1].Value);
                    User.Name = Convert.ToString(worksheet.Cells[i, 2].Value);
                    User.LastName = Convert.ToString(worksheet.Cells[i, 3].Value);
                    User.Number = Convert.ToString(worksheet.Cells[i, 4].Value);
                    User.Email = Convert.ToString(worksheet.Cells[i, 5].Value);
                    User.Organization = Convert.ToString(worksheet.Cells[i, 6].Value);
                    User.Note = Convert.ToString(worksheet.Cells[i, 7].Value);
                    User.Birthday = Convert.ToDateTime(Convert.ToString(worksheet.Cells[i, 8].Value));
                    User.Passport = Convert.ToString(worksheet.Cells[i, 9].Value) + " " + Convert.ToString(worksheet.Cells[i, 10].Value);
                    Statements.Add(User);
                }
            }
        }
    }

    private async Task Submit()
    {
        foreach (var p in Statements)
        {
            p.EmployeeId = SelectedEmployeeId;
        }
        using var response = await Http.PostAsJsonAsync($"https://localhost:7244/api/Statement/CreateGrpous", Statements);
        if (response.IsSuccessStatusCode)
        {
            manager.NavigateTo("/");
        }
        else
        {
            await response.Content.ReadAsStringAsync();
        }
    }
}

