@page "/Groups"
@using Data.Models
@using Aspose.Cells
@using Service.Interfaces
@using Service.Repositories
@using Syncfusion.Blazor.Buttons
@using Microsoft.AspNetCore.Components.Forms
@using Append.Blazor.Notifications
@using Microsoft.AspNetCore.Components

@inject INotificationService NotificationService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager manager
@inject IStatementRepository StatementRepository
@inject IWebHostEnvironment _appEnvironment
@inject IJSRuntime JSRuntime


<html>
<head>
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/imask/6.0.7/imask.min.js"></script>
</head>
<body>
    <a class="btn btn-primary" href="/Home">Главная</a>
    @if (Division == null && Employees == null)
    {
        <p><em>Загрузка...</em></p>
    }
    else
    {
        <center>
            <div style="width: 1030px">
                <form method="post" class="form-signin" @onsubmit="Submit" @formname="starship-plain-form">
                    <AntiforgeryToken />
                    <h2>Форма записи на посещение мероприятия</h2>
                    <div id="block1" class="info">
                        <center>
                            <h3>Информация для пропуска</h3>
                            <center><h4>Срок действия заявки:</h4></center>
                            <h5>
                                C*
                                <InputDate @bind-Value="@InputStatement.BeginDate"
                                           min="@minBeginDate" max="@maxBeginDate" required="required"
                                           @oninput="((ChangeEventArgs argsBeginDate) => CheckDateRangeBegin(argsBeginDate, minBeginDate, maxBeginDate))"
                                           @onchange="((ChangeEventArgs argsBeginDate) => CheckDateRangeBegin(argsBeginDate, minBeginDate, maxBeginDate))" />
                                по
                                <InputDate @bind-Value="@InputStatement.EndDate"
                                           min="@minEndDate" max="@maxEndDate" required="required"
                                           @oninput="((ChangeEventArgs argsEndDate) => CheckDateRangeEnd(argsEndDate, minBeginDate, maxEndDate))"
                                           @onchange="((ChangeEventArgs argsEndDate) => CheckDateRangeEnd(argsEndDate, minBeginDate, maxEndDate))" />
                            </h5>


                            <center><h4>Цель посещения:</h4></center>
                            <InputSelect @bind-Value="@InputStatement!.Target">
                                <option value="">Выберите цель</option>
                                <option value="Экскурсия"> Экскурсия </option>
                            </InputSelect>
                        </center>
                    </div>

                    <div id="block2" class="info">
                        <center>
                            <h3>Принимающая сторона</h3>
                            <h5>Подразделение*:</h5>
                            <InputSelect class="form-control" @bind-Value="@DivisionId">
                                @foreach (var p in Division)
                                {
                                    <option value="@p.Id">@p.Info</option>
                                }
                            </InputSelect>
                            <h5>ФИО*:</h5>
                            <InputSelect @bind-Value="@SelectedEmployeeId">
                                @foreach (var p in Employees)
                                {
                                    if (DivisionId == p.DivisionId)
                                    {
                                        <option value="@p.Id">@p.Name</option>
                                    }
                                }
                            </InputSelect>
                        </center>
                    </div>
                    <p></p>
                    <div class="info2">
                        <h3>Информация о посетителе</h3>
                        <table>
                            <tr>
                                <td>
                                    <h5>Фамилия*:</h5>
                                </td>
                                <td>
                                    <InputText id="Name" @bind-Value="InputStatement.FirstName" class="form-control" required="required" />

                                </td>
                                <td>
                                    <h5>Организация:</h5>
                                </td>
                                <td>
                                    <InputText id="Organization" @bind-Value="InputStatement!.Organization" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <h5>Имя*:</h5>
                                </td>
                                <td>
                                    <InputText id="Name" @bind-Value="InputStatement.Name" class="form-control" required="required" />
                                </td>
                                <td>
                                    <h5>Примечание*:</h5>
                                </td>
                                <td>
                                    <InputText id="Note" @bind-Value="InputStatement!.Note" required="required" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <h5>Отчество:</h5>
                                </td>
                                <td>
                                    <InputText @bind-Value="InputStatement!.LastName" />
                                </td>
                                <td>
                                    <h5>Дата рождения*:</h5>
                                </td>
                                <td>
                                    <InputDate @bind-Value="InputStatement!.Birthday" required="required" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <h5>Телефон:</h5>
                                </td>
                                <td>
                                    <input type="text" id="phoneInput" @bind="InputStatement.Number" />
                                </td>
                                <td>
                                    <h5>Серия*:</h5>
                                </td>
                                <td>
                                    <InputText @bind-Value="sPassport" required="required" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <h5>Email*:</h5>
                                </td>
                                <td>
                                    <InputText @bind-Value="InputStatement!.Email" required="required" />
                                </td>
                                <td>
                                    <h5>Номер*:</h5>
                                </td>
                                <td>
                                    <InputText @bind-Value="nPassport" required="required" />
                                </td>
                            </tr>
                        </table>

                        <input type="submit" class="m-2 p-2 btn btn-primary" @onclick="AddUser" value="Добавить посетителя" />

                        <div class="info">
                            <h6>Список посетителей</h6>

                            <div info_file>
                                <label for="visits"></label>
                                <InputFile OnChange="OnInputExelChange" accept=".xls,.pdf" />
                                <a href='table.xls'>Скачать шаблон списка</a>
                            </div>


                            <div class="table">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>№</th>
                                            <th>ФИО</th>
                                            <th>Контакты</th>
                                            <th>Фотография</th>
                                            <th>Pdf</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            if (Statements != null)
                                            {
                                                for (int i = 0; i < Statements.Count(); i++)
                                                {
                                                    var currentIndex = i;
                                                    <tr>
                                                        <td>@(i+1)</td>
                                                        <td>@Statements[i].Name</td>
                                                        <td>@Statements[i].Number</td>
                                                        <td><InputFile OnChange="@(e => OnInputPhotoChange(e, currentIndex))" /></td>
                                                        <td><InputFile OnChange="@(e => OnInputFileChange(e, currentIndex))" /></td>
                                                    </tr>
                                                }
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <input type="submit" @onclick="Clear" value="Очистить" />
                        <input type="submit" @onclick="Submit" value="Оформить заявку" />
                    </div>
                </form>
            </div>
        </center>
    }
</body>
</html>

@code {
    [SupplyParameterFromForm]

    public Statement InputStatement { get; set; } 
    public List<Statement> Statements { get; set; } = new();
    public string sPassport { get; set; }
    public string nPassport { get; set; }

    private DateTime minBeginDate;
    private DateTime maxBeginDate;
    private DateTime minEndDate;
    private DateTime maxEndDate;


    private int SelectedEmployeeId = 0;
    private int DivisionId = 1;

    private List<Employees>? Employees;
    private List<Division>? Division;

    static HttpClient Http = new HttpClient();

    protected override void OnInitialized()
    {

        minBeginDate = DateTime.Today.AddDays(1);
        maxBeginDate = DateTime.Today.AddDays(15);
        minEndDate = DateTime.Today.AddDays(2); ;
        maxEndDate = DateTime.Today.AddDays(16);

        InputStatement ??= new();
        Division = StatementRepository.GetDivision() ?? new List<Division>();
        Employees = StatementRepository.GetEmployees() ?? new List<Employees>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("applyPhoneMask");
        }
    }


    #region Проверка на дату начала действия пропуска
    private void CheckDateRangeBegin(ChangeEventArgs argsBeginDate, DateTime minDate, DateTime maxDate)
    {
        if (DateTime.TryParse(argsBeginDate.Value.ToString(), out DateTime selectedDate))
        {
            if (selectedDate < minDate)
            {
                InputStatement.BeginDate = minDate;
            }
            else if (selectedDate >= maxDate)
            {
                InputStatement.BeginDate = maxDate;
            }
            


            else
            {
                InputStatement.BeginDate = selectedDate;
            }


        }
    }

    #endregion

    #region Проверка на дату конец действия пропуска
    private void CheckDateRangeEnd(ChangeEventArgs argsEndDate, DateTime minDate, DateTime maxDate)
    {
        if (DateTime.TryParse(argsEndDate.Value.ToString(), out DateTime selectedDate))
        {
            if (selectedDate < minDate)
            {
                InputStatement.EndDate = minDate;
            }
            else if (selectedDate >= maxDate)
            {
                InputStatement.EndDate = maxDate;
            }



            else
            {
                InputStatement.EndDate = selectedDate;
            }


        }
    }

    #endregion

    private async Task OnInputPhotoChange(InputFileChangeEventArgs e, int i)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                using var memoryStream = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 2083432).CopyToAsync(memoryStream);
                Statements[i].Photo = memoryStream.ToArray();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка: {ex.Message}");
            }

        }
    }

    private async void AddUser()
    {
        if (InputStatement.FirstName == null && InputStatement.Name == null && InputStatement.Email == null && InputStatement.Note == null)
        {

            NotificationOptions options = new NotificationOptions
                {
                    Body = "Заполните все поля!",
                };
        }
        else
        {
            InputStatement.Passport = sPassport + " " + nPassport;
            Statements.Add(InputStatement);
        }


    }

    private async void Clear()
    {
        InputStatement.FirstName = string.Empty;
        InputStatement.Name  = string.Empty;
        InputStatement.LastName = string.Empty;
        InputStatement.Organization = string.Empty;
        InputStatement.Note = string.Empty;
        InputStatement.Number = string.Empty;
        InputStatement.Email = string.Empty;
        sPassport = string.Empty;
        nPassport = string.Empty;
        DivisionId = 0;
        SelectedEmployeeId = 1;
        InputStatement.Target = string.Empty;
        InputStatement.BeginDate = minBeginDate;
        InputStatement.EndDate = minEndDate;
        //InputStatement.Birthday = null;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e, int i)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                using var memoryStream = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 2083432).CopyToAsync(memoryStream);
                Statements[i].Pdf = memoryStream.ToArray();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка: {ex.Message}");
            }
        }
    }

    private async Task OnInputExelChange(InputFileChangeEventArgs e)
    {
        var uploadedExelGroupUsers = e.File;
        if (uploadedExelGroupUsers != null)
        {
            var path = Path.Combine(_appEnvironment.WebRootPath, "GroupUsers", uploadedExelGroupUsers.Name);
            using var stream = uploadedExelGroupUsers.OpenReadStream();
            using var fileStream = new FileStream(path, FileMode.Create);
            await stream.CopyToAsync(fileStream);

            using (Workbook wb = new Workbook(_appEnvironment.WebRootPath + $"/GroupUsers/{uploadedExelGroupUsers.Name}"))
            {

                // Получить рабочий лист, используя его индекс
                Worksheet worksheet = wb.Worksheets[0];

                int rows = worksheet.Cells.MaxDataRow + 1;

                for (int i = 1; i < rows; i++)
                {
                    Statement User = new();
                    User.BeginDate = InputStatement.BeginDate;
                    User.EndDate = InputStatement.EndDate;
                    User.Target = InputStatement.Target;
                    User.FirstName = Convert.ToString(worksheet.Cells[i, 1].Value);
                    User.Name = Convert.ToString(worksheet.Cells[i, 2].Value);
                    User.LastName = Convert.ToString(worksheet.Cells[i, 3].Value);
                    User.Number = Convert.ToString(worksheet.Cells[i, 4].Value);
                    User.Email = Convert.ToString(worksheet.Cells[i, 5].Value);
                    User.Organization = Convert.ToString(worksheet.Cells[i, 6].Value);
                    User.Note = Convert.ToString(worksheet.Cells[i, 7].Value);
                    User.Birthday = Convert.ToDateTime(Convert.ToString(worksheet.Cells[i, 8].Value));
                    User.Passport = Convert.ToString(worksheet.Cells[i, 9].Value) + " " + Convert.ToString(worksheet.Cells[i, 10].Value);
                    Statements.Add(User);
                }
            }
        }
    }

    private async Task Submit()
    {
        foreach(var p in Statements)
        {
            p.EmployeeId = SelectedEmployeeId;
        }
        using var response = await Http.PostAsJsonAsync($"https://localhost:7244/api/Statement/CreateGrpous", Statements);
        if (response.IsSuccessStatusCode)
        {
            manager.NavigateTo("/");
        }
        else
        {
            await response.Content.ReadAsStringAsync();
        }
    }
}

<script>
    function applyPhoneMask() {
        var phoneInput = document.getElementById('phoneInput');
        var phoneMask = IMask(phoneInput, {
            mask: '+{7}(000)000-00-00'
        });
    }
</script>