@page "/Personal"
@using Data.Models
@using Service.Interfaces
@using Service.Repositories
@using Syncfusion.Blazor.Buttons
@using Microsoft.AspNetCore.Components.Forms
@using Append.Blazor.Notifications

@inject INotificationService NotificationService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager manager
@inject StatementRepository StatementRepository


<html>
<head>
    

</head>
<body>
    <a class="btn btn-primary" href="/">Главная</a>
    @if (Division == null && Employees == null)
    {
        <p><em>Загрузка...</em></p>
    }
    else
    {
        <center>
            <div style="width: 1030px">
                <form method="post" class="form-signin" @onsubmit="Submit" @formname="starship-plain-form">
                    <AntiforgeryToken />
                    <h2>Форма записи на посещение мероприятия</h2>
                    <div id="block1" class="info">
                        <center>
                            <h3>Информация для пропуска</h3>
                            <center><h4>Срок действия заявки:</h4></center>
                            <h5>
                                C*
                                <InputDate @bind-Value="@InputStatement!.BeginDate" id="startDate" min="<?= date('Y-m-d', strtotime('+1 day')) ?>" oninput="validateStartDate()" required="required" />

                                по
                                <InputDate @bind-Value="@InputStatement!.EndDate" id="endDate" max="<?= date('Y-m-d', strtotime('+15 days')) ?>" oninput="validateEndDate()" required="required" />

                            </h5>
                            <center><h4>Цель посещения:</h4></center>
                            <InputSelect @bind-Value="@InputStatement!.Target">
                                <option value="">Выберите цель</option>
                                <option value="Экскурсия">хочется</option>
                                
                            </InputSelect>
                        </center>
                    </div>

                    <div id="block2" class="info">
                        <center>
                            <h3>Принимающая сторона</h3>
                            <h5>Подразделение*:</h5>
                            <InputSelect class="form-control" @bind-Value="@DivisionId">
                                @foreach (var p in Division)
                                {
                                    <option value="@p.Id">@p.Info</option>
                                }
                            </InputSelect>
                            <h5>ФИО*:</h5>
                            <InputSelect @bind-Value="@SelectedEmployeeId">
                                @foreach (var p in Employees)
                                {
                                    if (DivisionId == p.DivisionId)
                                    {
                                        <option value="@p.Id">@p.Name</option>
                                    }
                                }
                            </InputSelect>
                        </center>
                    </div>
                    <p></p>
                    <div class="info2">
                        <h3>Информация о посетителе</h3>
                        <table>
                            <tr>
                                <td>
                                    <h5>Фамилия*:</h5>
                                </td>
                                <td>
                                    <InputText id="Name" @bind-Value="InputStatement!.FirstName" class="form-control" required="required" />

                                </td>
                                <td>
                                    <h5>Организация:</h5>
                                </td>
                                <td>
                                    <InputText id="Organization" @bind-Value="InputStatement!.Organization" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <h5>Имя*:</h5>
                                </td>
                                <td>
                                    <InputText id="Name" @bind-Value="InputStatement!.Name" class="form-control" required="required" />
                                </td>
                                <td>
                                    <h5>Примечание*:</h5>
                                </td>
                                <td>
                                    <InputText id="Note" @bind-Value="InputStatement!.Note" required="required" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <h5>Отчество:</h5>
                                </td>
                                <td>
                                    <InputText @bind-Value="InputStatement!.LastName" />
                                </td>
                                <td>
                                    <h5>Дата рождения*:</h5>
                                </td>
                                <td>
                                    <InputDate @bind-Value="InputStatement!.Birthday" min="1920-01-01" required="required" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <h5>Телефон:</h5>
                                </td>
                                <td>
                                    <InputText @bind-Value="InputStatement.Number" id="phone" required="required" />
                                </td>
                                <td>
                                    <h5>Серия*:</h5>
                                </td>
                                <td>
                                    <InputText @bind-Value="sPassport" required="required" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <h5>Email*:</h5>
                                </td>
                                <td>
                                    <InputText @bind-Value="InputStatement!.Email" required="required" />
                                </td>
                                <td>
                                    <h5>Номер*:</h5>
                                </td>
                                <td>
                                    <InputText @bind-Value="nPassport" required="required" />
                                </td>
                            </tr>
                        </table>
                        <div class="foto">
                            <center>
                                @if (InputStatement.Photo != null)
                                {
                                    var imageBase64 = Convert.ToBase64String(InputStatement.Photo);
                                    var imageSrc = $"data:image/jpeg;base64,{imageBase64}";
                                    <img src="@imageSrc" alt="Фото посетителя" style="width: 120px; height: 120px;" />
                                }
                                <p></p>
                                <InputFile OnChange="OnInputPhotoChange" />
                            </center>
                        </div>
                    </div>
                    <div class="info" id="block1">
                        <h3>Прикрепить документ</h3>
                        <InputFile OnChange="OnInputFileChange" />
                    </div>
                    <div id="block3">
                        <input type="submit" value="Оформить заявку" />
                    </div>
                </form>
            </div>
        </center>
    }


    <script>
        $(document).ready(function () {
            $('#phone').inputmask({
                mask: "+7(999) 999-99-99",
                definitions: {
                    9: {
                        validator: "[0-9]",
                        casing: "lower"
                    }
                },
                placeholder: "_",
                showPlaceholder: false
            });
        });

    </script>

    <script>
        function validateStartDate() {
            var startDateInput = document.getElementById('startDate');
            var endDateInput = document.getElementById('endDate');

            var minStartDate = new Date();
            minStartDate.setDate(minStartDate.getDate() + 1); // Находим следующий день от текущей даты

            var selectedStartDate = new Date(startDateInput.value);

            if (selectedStartDate < minStartDate) {
                startDateInput.value = minStartDate.toISOString().split('T')[0];
                selectedStartDate = minStartDate;
            }

            validateEndDate(); // Вызываем проверку для даты окончания после изменения даты начала
        }

        function validateEndDate() {
            var startDateInput = document.getElementById('startDate');
            var endDateInput = document.getElementById('endDate');

            var minEndDate = new Date(startDateInput.value);
            minEndDate.setDate(minEndDate.getDate() + 1); // Дата начала плюс 1 день

            var maxEndDate = new Date(startDateInput.value);
            maxEndDate.setDate(maxEndDate.getDate() + 15); // Находим через 15 дней от даты начала

            var selectedStartDate = new Date(startDateInput.value);
            var selectedEndDate = new Date(endDateInput.value);

            if (selectedEndDate < selectedStartDate) {
                endDateInput.value = startDateInput.value;
                selectedEndDate = new Date(startDateInput.value);
            } else if (selectedEndDate > maxEndDate) {
                endDateInput.value = maxEndDate.toISOString().split('T')[0];
                selectedEndDate = maxEndDate;
            }

            // Проверяем, что разница между датами не более 15 дней
            var timeDiff = Math.abs(selectedEndDate.getTime() - selectedStartDate.getTime());
            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
            if (diffDays > 15) {
                document.getElementById('endDateError').innerText = 'Длительность заявки не может превышать 15 дней.';
                endDateInput.value = maxEndDate.toISOString().split('T')[0];
            } else {
                document.getElementById('endDateError').innerText = '';
            }
        }
    </script>

</body>
</html>

@code {
    [SupplyParameterFromForm]
    public Statement InputStatement { get; set; }
    public string sPassport { get; set; }
    public string nPassport { get; set; }

    private int SelectedEmployeeId = 0;
    private int DivisionId = 1;

    private List<Employees>? Employees;
    private List<Division>? Division;

    static HttpClient Http = new HttpClient();

    protected override void OnInitialized()
    {
        InputStatement ??= new();
        Division = StatementRepository.GetDivision() ?? new List<Division>();
        Employees = StatementRepository.GetEmployees() ?? new List<Employees>();
    }

    private async Task OnInputPhotoChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                using var memoryStream = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 2083432).CopyToAsync(memoryStream);
                InputStatement.Photo = memoryStream.ToArray();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка: {ex.Message}");
            }

        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                using var memoryStream = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 2083432).CopyToAsync(memoryStream);
                InputStatement.Pdf = memoryStream.ToArray();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка: {ex.Message}");
            }
        }
    }

    private async Task Submit()
    {
        try
        {
            InputStatement.EmployeeId = SelectedEmployeeId;
            InputStatement.Passport = $"{sPassport} {nPassport}";
            using var response = await Http.PostAsJsonAsync($"https://localhost:7244/api/Statement/CreateIndivid", InputStatement);
            if (response.IsSuccessStatusCode)
            {
                NotificationOptions options = new NotificationOptions
                    {
                        Body = "Заявка успешно отправлена!",
                    };

                await NotificationService.CreateAsync("Все хорошо", options);
                manager.NavigateTo("/");
            }
            else
            {
                
                NotificationOptions options = new NotificationOptions
                    {
                        Body = "Что-то пошло не так",
                    };

                await NotificationService.CreateAsync("Все плохо", options);
                await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при отправке запроса: {ex.Message}");
            NotificationOptions options = new NotificationOptions
                {
                    Body = $"Ошибка при отправке запроса: {ex.Message}",
                };
            await NotificationService.CreateAsync("Ошибка", options);
        }
    }

}