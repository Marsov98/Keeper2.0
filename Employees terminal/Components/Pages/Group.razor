@page "/Group/{id:int}"
@using Data.Models
@using System.Net.Http.Json

<html>
<head>
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
</style>
<body>
    <a class="btn btn-primary" href="/Home">Главная</a>
    @if (Statements == null)
    {
        <p><em>Загрузка...</em></p>
    }
    else
    {
        if (Statements.Count > 0)
        {
            <div class="modal" style="@(isOpenPhoto ? "display:block" : "display:none")">
                <div class="modal-content">
                    <span class="close" @onclick="CloseModalPhoto">&times;</span>
                    @if (Statements[i].Photo != null)
                    {
                        var imageBase64 = Convert.ToBase64String(Statements[i].Photo);
                        var imageSrc = $"data:image/jpeg;base64,{imageBase64}";
                        <img src="@imageSrc" alt="Фото пациента" />
                    }
                    else
                    {
                        <h3>Отсутствует фото посетителя</h3>
                    }
                </div>
            </div>
            <div class="modal" style="@(isOpenPDF ? "display:block" : "display:none")">
                <div class="modal-content">
                    <span class="close" @onclick="CloseModalPDF">&times;</span>
                    @if (Statements[i].Pdf != null)
                    {

                        var imageBase64 = Convert.ToBase64String(Statements[i].Pdf);
                        var imageSrc = $"data:application/pdf;base64,{imageBase64}";
                        <object data="@imageSrc" type="application/pdf" width="800" height="600">
                            Ваш браузер не поддерживает встроенные PDF.
                        </object>
                    }
                    else
                    {
                        <h3>Отсутствует скан паспорта посетителя</h3>
                    }
                </div>
            </div>
        }
        <center>
            <table class="table">
                <thead>
                    <tr>
                        <td><h3>ID</h3></td>
                        <td><h3>Фото</h3></td>
                        <td><h3>ID группы</h3></td>
                        <td><h3>ФИО</h3></td>
                        <td><h3>Сотрудник</h3></td>
                        <td><h3>Подразделение</h3></td>
                        <td align="center"><h3>Дата и время</h3></td>
                        <td><h3>Телефон</h3></td>
                        <td><h3>Email</h3></td>
                        <td><h3>Организация</h3></td>
                        <td><h3>Дата рождения</h3></td>
                        <td><h3>Паспорт</h3></td>
                        <td><h3>Примечание</h3></td>
                        <td><h3>ЧС</h3></td>
                    </tr>
                </thead>
                <tbody>
                    @{
                        for (int i = 0; i < Statements.Count(); i++)
                        {
                            var currentIndex = i;
                            <tr>
                                <td>
                                    <h3>@Statements[i].Id</h3>
                                </td>
                                <td>
                                    <button class="btn btn-primary" @onclick="@(() => OpenModalPhoto(currentIndex))">Фото</button>
                                </td>
                                <td>
                                    <h3>@Statements[i].ApplicationNumber</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].FirstName @Statements[i].Name @Statements[i].LastName</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Employees.Name</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Employees.Division.Info</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].BeginDate - @Statements[i].EndDate</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Number</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Email</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Organization</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Birthday</h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Passport  <button class="btn btn-primary" @onclick="@(() => OpenModalPDF(currentIndex))">Скан</button></h3>
                                </td>
                                <td>
                                    <h3>@Statements[i].Note</h3>
                                </td>
                                <td>
                                    <input type="submit" class="btn btn-primary" @onclick="() => BlackList(Statements[i].Passport)" value="Ложные данные" />
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            @if (Statements[0].VisitTimeId != null)
            {
                if (Statements[0].VisitTime.TimeStart == null)
                {
                    <button class="btn btn-primary" @onclick="GoStart">Группа пришла</button>
                }
                else
                {
                    if (Statements[0].VisitTime.TimeEnd == null)
                    {
                        <button class="btn btn-primary" @onclick="GoEnd">Группа ушела</button>
                    }
                }
            }
        </center>
    }
</body>
</html>
@code {
    [Parameter]
    public int Id { get; set; }
    public List<Statement> Statements = new List<Statement>();
    static HttpClient Http = new HttpClient();
    bool isOpenPhoto = false;
    bool isOpenPDF = false;
    int i;

    async Task OpenModalPhoto(int i)
    {
        this.i = i;
        isOpenPhoto = true;
    }
    void CloseModalPhoto() => isOpenPhoto = false;

    void OpenModalPDF(int i)
    {
        this.i = i;
        isOpenPDF = true;
    }
    void CloseModalPDF() => isOpenPDF = false;

    protected override async Task OnInitializedAsync()
    {
        using var response = await Http.GetAsync($"https://localhost:7244/api/Statement/GetGroup/{Id}");
        if (response.IsSuccessStatusCode)
        {
            Statements = await response.Content.ReadFromJsonAsync<List<Statement>>();
        }
    }

    private async Task BlackList(string passport)
    {
        using var response = await Http.GetAsync($"https://localhost:7244/api/User/BlackList/{passport}");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Пользователь добавлен в ЧС");
        }
    }

    private async Task GoStart()
    {
        foreach (var statement in Statements)
        {
            statement.VisitTime.TimeStart = DateTime.Now;
        }
        using var response = await Http.PostAsJsonAsync($"https://localhost:7244/api/Statement/UpdateVisitTime", Statements[0].VisitTime);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Готово");
        }
        OnInitializedAsync();
    }

    private async Task GoEnd()
    {
        foreach (var statement in Statements)
        {
            statement.VisitTime.TimeEnd = DateTime.Now;
        }
        using var response = await Http.PostAsJsonAsync($"https://localhost:7244/api/Statement/UpdateVisitTime", Statements[0].VisitTime);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Готово");
        }
        OnInitializedAsync();
    }
}

