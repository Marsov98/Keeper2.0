@page "/Individ/{id:int}"
@using Data.Models

@inject NavigationManager NavigationManager

<html>
<head>
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
</style>
<body>
    <a class="btn btn-primary" href="/Home">Главная</a>
    @if (Statements == null)
    {
        <p><em>Загрузка...</em></p>
    }
    else
    {
        <div class="modal" style="@(isOpenPhoto ? "display:block" : "display:none")">
            <div class="modal-content">
                <span class="close" @onclick="CloseModalPhoto">&times;</span>
                @if (Statements.Photo != null)
                {
                    var imageBase64 = Convert.ToBase64String(Statements.Photo);
                    var imageSrc = $"data:image/jpeg;base64,{imageBase64}";
                    <img src="@imageSrc" alt="Фото пациента" />
                }
                else
                {
                    <h3>Отсутствует фото посетителя</h3>
                }
            </div>
        </div>
        <div class="modal" style="@(isOpenPDF ? "display:block" : "display:none")">
            <div class="modal-content">
                <span class="close" @onclick="CloseModalPDF">&times;</span>
                @if (Statements.Pdf != null)
                {

                    var imageBase64 = Convert.ToBase64String(Statements.Pdf);
                    var imageSrc = $"data:application/pdf;base64,{imageBase64}";
                    <object data="@imageSrc" type="application/pdf" width="1000" height="800">
                        Ваш браузер не поддерживает встроенные PDF.
                    </object>
                }
                else
                {
                    <h3>Отсутствует скан паспорта посетителя</h3>
                }
            </div>
        </div>
        <center>
            <table class="table">
                <thead>
                    <tr>
                        <td><h3>ID</h3></td>
                        <td><h3>Фото</h3></td>
                        <td><h3>ФИО</h3></td>
                        <td><h3>Сотрудник</h3></td>
                        <td><h3>Подразделение</h3></td>
                        <td align="center"><h3>Дата и время</h3></td>
                        <td><h3>Телефон</h3></td>
                        <td><h3>Email</h3></td>
                        <td><h3>Организация</h3></td>
                        <td><h3>Дата рождения</h3></td>
                        <td><h3>Паспорт</h3></td>
                        <td><h3>Примечание</h3></td>
                        <td><h3>ЧС</h3></td>
                    </tr>
                </thead>
                <tbody>

                    <tr>
                        <td>
                            <h3>@Statements.Id</h3>
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="OpenModalPhoto">Фото</button>
                        </td>
                        <td>
                            <h3>@Statements.FirstName @Statements.Name @Statements.LastName</h3>
                        </td>
                        @if (Statements.Employees == null)
                        {
                            <td>
                                <em>Загрузка...</em>
                            </td>
                            <td>
                                <em>Загрузка...</em>
                            </td>
                        }
                        else
                        {
                            <td>
                                <h3>@Statements.Employees.Name</h3>
                            </td>
                            <td>
                                <h3>@Statements.Employees.Division.Info</h3>
                            </td>
                        }
                        <td>
                            <h3>@Statements.BeginDate - @Statements.EndDate</h3>
                        </td>
                        <td>
                            <h3>@Statements.Number</h3>
                        </td>
                        <td>
                            <h3>@Statements.Email</h3>
                        </td>
                        <td>
                            <h3>@Statements.Organization</h3>
                        </td>
                        <td>
                            <h3>@Statements.Birthday</h3>
                        </td>
                        <td>
                            <h3>@Statements.Passport <button class="btn btn-primary" @onclick="OpenModalPDF">Скан</button></h3>
                        </td>
                        <td>
                            <h3>@Statements.Note</h3>
                        </td>
                        <td>
                            <input type="submit" class="btn btn-primary" @onclick="() => BlackList(Statements.Passport)" value="Ложные данные" />
                        </td>
                    </tr>
                </tbody>
            </table>
            @if (Statements.VisitTimeId == null)
            {
                <button class="btn btn-primary" @onclick="GoIn">Пришел</button>
            }
            else
            {
                if (Statements.VisitTime.TimeEnd != null && Statements.VisitTime.TimeOut == null)
                {
                    <button class="btn btn-primary" @onclick="GoOut">Ушел</button>
                }
            }
        </center>
    }
</body>
</html>
@code {
    [Parameter]
    public int Id { get; set; }
    public Statement Statements = new Statement();
    static HttpClient Http = new HttpClient();
    bool isOpenPhoto = false;
    bool isOpenPDF = false;

    void OpenModalPhoto() => isOpenPhoto = true;
    void CloseModalPhoto() => isOpenPhoto = false;

    void OpenModalPDF() => isOpenPDF = true;
    void CloseModalPDF() => isOpenPDF = false;

    protected override async Task OnInitializedAsync()
    {
        using var response = await Http.GetAsync($"https://localhost:7244/api/Statement/GetIndivid/{Id}");
        if (response.IsSuccessStatusCode)
        {
            Statements = await response.Content.ReadFromJsonAsync<Statement>();
        }
    }

    private async Task BlackList(string passport)
    {
        using var response = await Http.GetAsync($"https://localhost:7244/api/User/BlackList/{passport}");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Пользователь добавлен в ЧС");
        }
    }

    private async Task GoIn()
    {
        int TimeId;
        using var responseTime = await Http.GetAsync($"https://localhost:7244/api/Statement/CreateVisitTime");
        if (responseTime.IsSuccessStatusCode)
        {
            TimeId = await responseTime.Content.ReadFromJsonAsync<int>();
            Statements.VisitTimeId = TimeId;
            using var response = await Http.PostAsJsonAsync($"https://localhost:7244/api/Statement/UpdateIndivid", Statements);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Готово");
            }
            OnInitializedAsync();
        }
    }

    private async Task GoOut()
    {
        Statements.VisitTime.TimeOut = DateTime.Now;
        using var response = await Http.PostAsJsonAsync($"https://localhost:7244/api/Statement/UpdateVisitTime", Statements.VisitTime);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Готово");
        }
        OnInitializedAsync();
    }
}